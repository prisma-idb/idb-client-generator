datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator prismaIDB {
  provider = "idb-client-generator"
  output   = "./prisma-idb"
}

model User {
  id       Int         @id @default(autoincrement())
  name     String
  profile  Profile?
  posts    Post[]
  comments Comment[]
  Child    Child[]
  Father   Father[]
  Mother   Mother[]
  groups   UserGroup[]
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String
  userGroups UserGroup[]
}

model UserGroup {
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  joinedOn DateTime @default(now())

  @@id([groupId, userId])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  author    User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId  Int?
  comments  Comment[]
  tags      String[]
  numberArr Int[]
  views     Int?
}

model Comment {
  id     String @id @default(cuid(2))
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId Int    @default(0)
  text   String
}

model AllFieldScalarTypes {
  id          Int        @id @default(autoincrement())
  string      String
  boolean     Boolean
  booleans    Boolean[]
  bigInt      BigInt
  bigIntegers BigInt[]
  float       Float
  floats      Float[]
  decimal     Decimal
  decimals    Decimal[]
  dateTime    DateTime
  dateTimes   DateTime[]
  json        Json
  jsonS       Json[]
  bytes       Bytes
  manyBytes   Bytes[]
}

model Father {
  firstName       String
  lastName        String
  children        Child[]
  wife            Mother  @relation(fields: [motherFirstName, motherLastName], references: [firstName, lastName])
  motherFirstName String
  motherLastName  String
  user            User?   @relation(fields: [userId], references: [id])
  userId          Int?

  @@id([firstName, lastName])
  @@unique([motherFirstName, motherLastName])
}

model Mother {
  firstName String
  lastName  String
  children  Child[]
  husband   Father?
  user      User?   @relation(fields: [userId], references: [id])
  userId    Int?

  @@id([firstName, lastName])
}

model Child {
  childFirstName  String
  childLastName   String
  fatherFirstName String
  fatherLastName  String
  motherFirstName String
  motherLastName  String
  user            User?  @relation(fields: [userId], references: [id])

  father Father @relation(fields: [fatherLastName, fatherFirstName], references: [lastName, firstName])
  mother Mother @relation(fields: [motherFirstName, motherLastName], references: [firstName, lastName])
  userId Int?

  @@id([childFirstName, childLastName])
}

model ModelWithEnum {
  id           Int      @id @default(autoincrement())
  enum         MyEnum
  nullableEnum MyEnum?
  enumArray    MyEnum[]
}

enum MyEnum {
  A
  B
  C
}

model TestUuid {
  id   String @id @default(uuid())
  name String
}

model ModelWithOptionalRelationToUniqueAttributes {
  id     String                     @id @default(uuid())
  link   ModelWithUniqueAttributes? @relation(fields: [linkId], references: [id])
  linkId Int?
}

model ModelWithUniqueAttributes {
  id    Int                                           @id @default(autoincrement())
  code  String                                        @unique
  links ModelWithOptionalRelationToUniqueAttributes[]
}
